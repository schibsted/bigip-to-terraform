#!/bin/bash

usage () {
    if [ -f README.md ] ; then
        exec >&2
        echo
        echo "USAGE:"
        sed '/## Usage/,/##/!d; /##/d' README.md
    else
        echo "Please see README.md for usage" >&2
    fi
    exit 1
}


do_export () {
    # Export from BigIP using iControl REST api from python
    # This builds a skeleton terraform file called all.tf
    # which can be used to do import commands from
    if [ ! -f login.json ] ; then
        cat <<EOF >&2
There are no login details.  Please provide login.json:

---
{
    "bigip": "172.16.17.18",
    "user": "someuser",
    "password": "the-password"
}
---

The user may be a read only user (audit user).

EOF
        exit 1
    fi
    
    echo "** Dumping all VIPs, used pools and used nodes"

    ./dump.py "$@" >import.tf
}


do_import () {
    # After the skeleton all.tf has been generated we can run the
    # terraform commands to populate the state file and then use
    # "terraform show" to generate a new all.tf with actual resource
    # definitions
    cp -v import.tf terraformer
    newname=import-$(date '+%F-%R').tf
    mv import.tf $newname
    
    cd terraformer

    echo "** Initializing for terraform import"

    if [ ! -f secrets.tf ] ; then
        echo "* No secrets.tf provided.  Seeding from login.json"
        cat <<EOF >secrets.tf
variable "hostname" { default = $(jq .bigip ../login.json) }
variable "username" { default = $(jq .user ../login.json) }
variable "password" { default = $(jq .password ../login.json) }
EOF
    else
        echo "* There is already a secrets.tf here. Using."
    fi

    if [ "$clear" = yes ] ; then
        # Only apropriate to remove state if starting from scratch
        echo "* Clearing terraform state and resources"
        rm -rf .terraform* terraform.tfstate* resources.tf*
    fi

    echo "* Initializing terraform"
    terraform init

    echo "** Doing a terraform import"

    # This issues one terraform command pr. resource
    <import.tf grep '^#import#' | cut -d' ' -f2- | bash -e
    <import.tf grep "^#sed#"    | cut -d' ' -f2- > new.sed
    terraform show -no-color | grep -vw id >../new.tf

    sed -i.bak -f new.sed ../new.tf
    rm new.sed

    if [ ! -f resources.tf ] ; then
        : > resources.tf
    fi
    (echo "# Imported $only_vip $(date)"; echo; cat ../new.tf) >> resources.tf
    rm import.tf

    cd ..

    echo
    echo "** Done"
    echo "* Newly imported resources are found in terraformer/resources.tf"
    echo "* The skeleton terraform file is in ./$newname"
    echo "    In this file you can find lists of unreferenced resources if"
    echo "    you would like to remove them from your BigIP."
}

# Option defaults
clear=yes
really_clear=''
undefs_only=''
only_vip="complete config"

while getopts "v:uch" opt; do
    case $opt in
        v) clear=''
           undefs_only=''
           only_vip="with filter $OPTARG"
           ;;
        u) undefs_only='yes';;
        c) really_clear=yes;;
        h) usage;;
        *) usage;;
    esac
done

if [ "$really_clear" = "yes" ] ; then
    clear=yes
fi

# Exit on all errors from now on
set -e

do_export "$@"

if [ -z $undefs_only ] ; then
    do_import
else
    newname="unref-$(date '+%F-%R').tf"
    mv import.tf $newname
    echo
    echo "** Done"
    echo "* List of unreferenced resources is in $newname"
fi
